import logging
import os
import requests
import yt_dlp
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
import google_auth_oauthlib.flow
from dotenv import load_dotenv
import time

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load environment variables
load_dotenv()

# Path to the log file
PROCESSED_VIDEOS_LOG = "processed_videos.log"

# --------------------------
# Twitch API Functions
# --------------------------

print("Let's get started!")

def get_twitch_oauth_token(client_id, client_secret):
    """
    Obtain a Twitch OAuth token using your client credentials.
    """
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }
    try:
        logging.info(f"Requesting Twitch OAuth token with client_id: {client_id}")
        response = requests.post(url, params=params)
        response.raise_for_status()
        logging.info("Successfully obtained Twitch OAuth token.")
        return response.json()['access_token']
    except requests.exceptions.RequestException as e:
        logging.error(f"Failed to obtain Twitch OAuth token: {e}")
        raise

def get_twitch_videos(oauth_token, client_id, user_id, max_results=5, period="all", sort="time"):
    """
    Retrieve a list of videos from your Twitch account, handling pagination and optional sorting.
    """
    url = "https://api.twitch.tv/helix/videos"
    headers = {
        'Client-ID': client_id,
        'Authorization': f'Bearer {oauth_token}'
    }
    params = {
        'user_id': user_id,
        'first': min(max_results, 100),  # Twitch API allows a max of 100 per request
        'period': period,  # Options: "all", "day", "week", "month"
        'sort': sort  # Options: "time", "trending"
    }
    all_videos = []
    logging.info(f"Fetching videos with headers: {headers} and params: {params}")
    while True:
        try:
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            data = response.json()
            videos = data['data']
            all_videos.extend(videos)
            logging.info(f"Fetched {len(videos)} videos from Twitch.")

            # Check for pagination
            pagination = data.get('pagination', {})
            cursor = pagination.get('cursor')
            if not cursor or len(all_videos) >= max_results:
                break

            # Update params for the next page
            params['after'] = cursor
        except requests.exceptions.RequestException as e:
            logging.error(f"Failed to fetch videos from Twitch: {e}")
            raise

    return all_videos[:max_results]

# --------------------------
# Download with yt-dlp
# --------------------------

def download_video(video_url, output_filename):
    """
    Download a video from Twitch using yt-dlp.
    """
    ydl_opts = {
        'outtmpl': output_filename,
        'quiet': False,  # Enable yt-dlp's own output
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([video_url])
        logging.info(f"Successfully downloaded video: {output_filename}")
    except Exception as e:
        logging.error(f"Failed to download video: {e}")
        raise

# --------------------------
# YouTube API Functions
# --------------------------

def get_authenticated_youtube(client_secrets_file):
    """
    Authenticate and build the YouTube API client with the correct scopes.
    """
    scopes = [
        "https://www.googleapis.com/auth/youtube.force-ssl",
        "https://www.googleapis.com/auth/youtube.readonly",
        "https://www.googleapis.com/auth/youtube",
        "https://www.googleapis.com/auth/youtube.upload"
    ]

    try:
        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(
            client_secrets_file, scopes
        )
        credentials = flow.run_local_server(port=0)

        logging.info(f"Access Token: {credentials.token}")

        youtube = build("youtube", "v3", credentials=credentials)
        logging.info("Successfully authenticated with YouTube.")
        return youtube
    except Exception as e:
        logging.error(f"Failed to authenticate with YouTube: {e}")
        raise

def list_channels(youtube):
    """
    List channels associated with the authenticated account.
    """
    request = youtube.channels().list(
        part="snippet,contentDetails",
        mine=True
    )
    response = request.execute()
    return response.get('items', [])

def upload_video_to_youtube(youtube, video_file, twitch_video):
    """
    Upload a video file to YouTube with a private status.
    Copies metadata from the Twitch video to the YouTube video.
    Returns the uploaded video's YouTube video ID.
    """
    title = twitch_video.get('title', 'Untitled Twitch Video')
    description = twitch_video.get('description', '')
    tags = ['Twitch', 'Copied Video']

    body = {
        'snippet': {
            'title': title,
            'description': description,
            'tags': tags,
            'categoryId': '22'
        },
        'status': {
            'privacyStatus': 'private'
        }
    }
    media = MediaFileUpload(video_file, chunksize=-1, resumable=True)
    try:
        request = youtube.videos().insert(
            part="snippet,status",
            body=body,
            media_body=media
        )
        logging.info(f"Uploading '{title}' to YouTube...")
        response = None
        while response is None:
            status, response = request.next_chunk()
            if status:
                logging.info(f"Upload progress: {int(status.progress() * 100)}%")
        logging.info("Upload Complete!")
        return response['id']
    except Exception as e:
        logging.error(f"Failed to upload video to YouTube: {e}")
        raise

def get_or_create_playlist(youtube, playlist_title, playlist_description, privacy_status='private'):
    """
    Check for an existing playlist with the given title. If not found, create it.
    Returns the playlist ID.
    """
    try:
        
        request = youtube.playlists().list(part="snippet,status", mine=True, maxResults=50)
        response = request.execute()
        playlists = response.get('items', [])
        for playlist in playlists:
            if playlist['snippet']['title'] == playlist_title:
                logging.info(f"Found existing playlist: {playlist_title}")
                return playlist['id']
        
        logging.info(f"Creating new playlist: {playlist_title}")
        body = {
            'snippet': {
                'title': playlist_title,
                'description': playlist_description
            },
            'status': {
                'privacyStatus': privacy_status
            }
        }
        request = youtube.playlists().insert(part="snippet,status", body=body)
        response = request.execute()
        return response['id']
    except Exception as e:
        logging.error(f"Failed to get or create playlist: {e}")
        raise

def add_video_to_playlist(youtube, playlist_id, video_id):
    """
    Add the given YouTube video to the specified playlist.
    """
    body = {
        'snippet': {
            'playlistId': playlist_id,
            'resourceId': {
                'kind': 'youtube#video',
                'videoId': video_id
            }
        }
    }
    try:
        request = youtube.playlistItems().insert(part="snippet", body=body)
        response = request.execute()
        logging.info(f"Added video {video_id} to playlist {playlist_id}")
        return response
    except Exception as e:
        logging.error(f"Failed to add video to playlist: {e}")
        raise

def load_processed_videos():
    """Load the list of processed video IDs from the log file."""
    if not os.path.exists(PROCESSED_VIDEOS_LOG):
        return set()
    with open(PROCESSED_VIDEOS_LOG, 'r') as file:
        return set(line.strip() for line in file)

def save_processed_video(video_id):
    """Save a processed video ID to the log file."""
    with open(PROCESSED_VIDEOS_LOG, 'a') as file:
        file.write(f"{video_id}\n")

# --------------------------
# Main Function
# --------------------------

def main():
    # --- Twitch Credentials and Settings ---
    twitch_client_id = os.getenv('TWITCH_CLIENT_ID')
    twitch_client_secret = os.getenv('TWITCH_CLIENT_SECRET')
    twitch_user_id = os.getenv('TWITCH_USER_ID')  # Numeric user ID.
    max_results = int(os.getenv('MAX_RESULTS', 5))  # Number of videos to process (adjust as needed)
    period = os.getenv('TWIITCH_VIDEO_PERIOD', 'all')  # Options: "all", "day", "week", "month"
    sort = os.getenv('TWIITCH_VIDEO_SORT', 'time')  # Options: "time", "trending"

    # --- YouTube Credentials ---
    client_secrets_file = 'client_secrets.json'

    try:
        # Authenticate with the YouTube account
        youtube = get_authenticated_youtube(client_secrets_file)

        # List channels and select the correct one
        channels = list_channels(youtube)
        for channel in channels:
            logging.info(f"Channel ID: {channel['id']}, Title: {channel['snippet']['title']}")
        logging.info("Available channels have been logged.")

        # Use the channel ID you want to upload to
        selected_channel_id = os.getenv('YOUTUBE_CHANNEL')  # Example channel ID

        # Load processed videos
        processed_videos = load_processed_videos()

        # --- Get Twitch OAuth token and fetch videos ---
        logging.info("Obtaining Twitch OAuth token...")
        oauth_token = get_twitch_oauth_token(twitch_client_id, twitch_client_secret)
        logging.info("Fetching videos from Twitch...")
        videos = get_twitch_videos(oauth_token, twitch_client_id, twitch_user_id, max_results, period, sort)

        if not videos:
            logging.warning("No videos found on your Twitch account.")
            return

        # Process each video sequentially
        for video in videos:
            video_id = video['id']
            if video_id in processed_videos:
                logging.info(f"Skipping already processed video: {video_id}")
                continue

            try:
                video_file = f"{video_id}.mp4"
                # Download the video
                download_video(video['url'], video_file)
                # Upload the video
                upload_video_to_youtube(youtube, video_file, video)
                # Save the processed video ID
                save_processed_video(video_id)
                # Remove the video file after uploading
                if os.path.exists(video_file):
                    os.remove(video_file)
                    logging.info(f"Removed local file: {video_file}")
            except Exception as e:
                logging.error(f"Error processing video {video_id}: {e}")

    except Exception as e:
        logging.error(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
